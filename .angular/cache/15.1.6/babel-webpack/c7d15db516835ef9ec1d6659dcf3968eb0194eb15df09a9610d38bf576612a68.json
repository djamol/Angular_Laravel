{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Movie } from '../../model/movie.model';\nimport { Category } from '../../model/category.model';\nlet AdminComponent = class AdminComponent {\n  constructor(movieService, categoryService, cdr, main, auth) {\n    this.movieService = movieService;\n    this.categoryService = categoryService;\n    this.cdr = cdr;\n    this.main = main;\n    this.auth = auth;\n    this.movies = [];\n    this.filteredMovies = [];\n    this.unFilteredMovies = false;\n    this.searchKey = '';\n    this.category_id = '0';\n    this.show = 1;\n    this.selectedCategory = new Category();\n    this.categories = [];\n    this.isEditing = [];\n    this.selectedMovie = new Movie();\n    this.genreOptions = ['Romance', 'Drama', 'Action', 'Comedy', 'Sci-Fi', 'Thriller', 'Horror', 'Other'];\n  }\n  ngOnInit() {\n    this.getMovies();\n    this.getCategories();\n    console.log(\"auth\", this.auth.getToken());\n    console.log(\"auth api\", this.auth.apiUrl);\n  }\n  /*\n      getMovies() {\n        this.movieService.getMovies().subscribe((data: Movie[]) => {\n          this.movies = data;\n          this.filteredMovies = this.movies; // Initialize the filtered list\n        });\n      }\n  */\n  toggleEditing(movie) {\n    if (this.isEditing[movie.id]) {\n      this.isEditing[movie.id] = false;\n      this.editMovie(movie);\n      this.getMovies();\n    } else {\n      this.isEditing[movie.id] = true;\n    }\n  }\n  toggleEditingCategories(category) {\n    if (this.isEditing[category.id]) {\n      this.isEditing[category.id] = false;\n      this.editCategory(category);\n      this.getCategories();\n    } else {\n      this.isEditing[category.id] = true;\n    }\n  }\n  filterMovies() {\n    if (this.category_id == 'All' || this.category_id == 0) {\n      this.filteredMovies = this.movies.filter(movie => movie.title.toLowerCase().includes(this.searchKey.toLowerCase()));\n      this.unFilteredMovies = true;\n      return;\n    }\n    this.unFilteredMovies = false;\n    this.filteredMovies = this.movies.filter(movie => movie.title.toLowerCase().includes(this.searchKey.toLowerCase()) && movie.category_id == this.category_id);\n    this.cdr.detectChanges();\n  }\n  getMovies() {\n    this.movieService.getMovies().subscribe(movies => {\n      this.movies = movies.data;\n      this.filteredMovies = this.movies;\n      this.page_data = movies;\n      this.unFilteredMovies = true;\n    });\n  }\n  getCategories() {\n    this.categoryService.getCategories().subscribe(categories => {\n      this.categories = categories;\n    });\n  }\n  addMovie() {\n    const observer = {\n      next: response => {\n        this.getMovies();\n        this.selectedMovie = new Movie();\n        this.main.showMessage('Success', 'Successfully created a new movie.', '');\n      },\n      error: error => {\n        console.log('Error:', error.error);\n        this.main.showMessage('Error :' + error.status, error.error.error, '', 1);\n      },\n      complete: () => {\n        console.log('Complete');\n      }\n    };\n    this.movieService.createMovie(this.selectedMovie).subscribe(observer);\n    this.movieService.createMovie(this.selectedMovie).subscribe(() => {\n      this.getMovies();\n      this.selectedMovie = new Movie();\n      this.main.showMessage('Success', 'Successfully created a new movie.', '');\n    });\n  }\n  editMovie(movie) {\n    this.movieService.updateMovie(movie.id, movie).subscribe(() => {\n      this.getMovies();\n      this.main.showMessage('Success', 'Movie successfully updated', '');\n    });\n  }\n  deleteMovie(movie) {\n    this.movieService.deleteMovie(movie.id).subscribe(() => {\n      this.getMovies();\n      this.main.showMessage('Success', 'Movie successfully deleted', '');\n    });\n  }\n  addCategory() {\n    this.categoryService.createCategory(this.selectedCategory).subscribe(() => {\n      this.getCategories();\n      this.selectedCategory = new Category();\n      this.main.showMessage('Success', 'Successfully created a new category.', '');\n    });\n  }\n  editCategory(category) {\n    this.categoryService.updateCategory(category.id, category).subscribe(() => {\n      this.getCategories();\n      this.main.showMessage('Success', 'Category successfully updated', '');\n    });\n  }\n  removeRating(index) {\n    this.selectedMovie.ratings.splice(index, 1);\n  }\n  addRating() {\n    this.selectedMovie.ratings.push({\n      source: '',\n      value: '',\n      total: ''\n    });\n  }\n  deleteCategory(category) {\n    this.categoryService.deleteCategory(category.id).subscribe(() => {\n      this.getCategories();\n      this.main.showMessage('Success', 'Category successfully deleted', '');\n    });\n  }\n};\nAdminComponent = __decorate([Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})], AdminComponent);\nexport { AdminComponent };","map":{"version":3,"mappings":"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","names":["Component","Movie","Category","AdminComponent","constructor","movieService","categoryService","cdr","main","auth","ngOnInit","getMovies","getCategories","console","log","getToken","apiUrl","toggleEditing","movie","isEditing","id","editMovie","toggleEditingCategories","category","editCategory","filterMovies","category_id","filteredMovies","movies","filter","title","toLowerCase","includes","searchKey","unFilteredMovies","detectChanges","subscribe","data","page_data","categories","addMovie","observer","next","response","selectedMovie","showMessage","error","status","complete","createMovie","updateMovie","deleteMovie","addCategory","createCategory","selectedCategory","updateCategory","removeRating","index","ratings","splice","addRating","push","source","value","total","deleteCategory","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/var/www/html/openpbx/resources/angular/src/app/component/admin/admin.component.ts"],"sourcesContent":["import {  Component, OnChanges, SimpleChanges,ChangeDetectorRef   } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Movie } from '../../model/movie.model';\nimport { MovieService } from '../../service/movie.service';\nimport { Category } from '../../model/category.model';\nimport { CategoryService } from '../../service/category.service';\nimport { AppComponent } from '../../app.component';\nimport { AuthService } from '../../service/auth.service';\nimport { Observer } from 'rxjs';\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent {\n    movies: Movie[] = [];\n    filteredMovies: any[] = [];\n    page_data:any;\n    unFilteredMovies:boolean=false;\n    searchKey: string = '';\n    category_id:any='0';\n    show :number =1;\n    selectedCategory: Category =new Category();\n  categories: Category[]=[];\n  isEditing :any[]= [];\n  selectedMovie: Movie = new Movie();\n  genreOptions = ['Romance', 'Drama', 'Action', 'Comedy', 'Sci-Fi', 'Thriller', 'Horror', 'Other'];\n  movieForm: NgForm | undefined;\n\n    constructor(private movieService: MovieService, private categoryService: CategoryService,private cdr: ChangeDetectorRef,\n        private main:AppComponent,private auth:AuthService) {}\n\n    ngOnInit(): void {\n      this.getMovies();\n      this.getCategories();\n      console.log(\"auth\",this.auth.getToken());\n      console.log(\"auth api\",this.auth.apiUrl);\n    }\n/*\n    getMovies() {\n      this.movieService.getMovies().subscribe((data: Movie[]) => {\n        this.movies = data;\n        this.filteredMovies = this.movies; // Initialize the filtered list\n      });\n    }\n*/\ntoggleEditing(movie:any) {\n    if (this.isEditing[movie.id]) {\n        this.isEditing[movie.id]=false;\n        this.editMovie(movie);\n        this.getMovies();\n    } else {\n      this.isEditing[movie.id] = true;\n    }\n  }\n  toggleEditingCategories(category:any) {\n    if (this.isEditing[category.id]) {\n        this.isEditing[category.id]=false;\n        this.editCategory(category);\n        this.getCategories();\n    } else {\n      this.isEditing[category.id] = true;\n    }\n  }\n\n     filterMovies() {\n        if(this.category_id=='All' ||this.category_id==0){\n        this.filteredMovies = this.movies.filter(movie =>\n                movie.title.toLowerCase().includes(this.searchKey.toLowerCase()));\n        this.unFilteredMovies=true;\n        return;\n        }\n        this.unFilteredMovies=false;\n        this.filteredMovies = this.movies.filter(movie =>\n          movie.title.toLowerCase().includes(this.searchKey.toLowerCase()) && movie.category_id == this.category_id)\n        ;\n        this.cdr.detectChanges();\n\n       }\ngetMovies() {\n    this.movieService.getMovies().subscribe(movies => {\n      this.movies = movies.data;\n      this.filteredMovies=this.movies;\n      this.page_data =movies;\n      this.unFilteredMovies=true;\n    });\n  }\n\n  getCategories() {\n    this.categoryService.getCategories().subscribe(categories => {\n      this.categories = categories;\n    });\n  }\n\n\n  addMovie() {\n\n    const observer: Observer<any> = {\n        next: response => {\n            this.getMovies();\n            this.selectedMovie = new Movie();\n            this.main.showMessage('Success','Successfully created a new movie.','');\n        },\n        error: error => {\n          console.log('Error:', error.error);\n          this.main.showMessage('Error :'+error.status,error.error.error,'',1);\n        },\n        complete: () => {\n          console.log('Complete');\n        }\n      };\n    this.movieService.createMovie(this.selectedMovie).subscribe(observer);\n\n    this.movieService.createMovie(this.selectedMovie).subscribe(() => {\n      this.getMovies();\n      this.selectedMovie = new Movie();\n      this.main.showMessage('Success','Successfully created a new movie.','');\n    });\n  }\n\n  editMovie(movie: Movie) {\n    this.movieService.updateMovie(movie.id, movie).subscribe(() => {\n      this.getMovies();\n      this.main.showMessage('Success','Movie successfully updated','');\n    });\n  }\n\n  deleteMovie(movie: Movie) {\n    this.movieService.deleteMovie(movie.id).subscribe(() => {\n      this.getMovies();\n      this.main.showMessage('Success','Movie successfully deleted','');\n    });\n  }\n\n  addCategory() {\n\n    this.categoryService.createCategory(this.selectedCategory).subscribe(() => {\n      this.getCategories();\n      this.selectedCategory = new Category();\n      this.main.showMessage('Success','Successfully created a new category.','');\n    });\n\n  }\n\n  editCategory(category: Category) {\n\n    this.categoryService.updateCategory(category.id, category).subscribe(() => {\n      this.getCategories();\n      this.main.showMessage('Success','Category successfully updated','');\n    });\n\n  }\n  removeRating(index: number): void {\n    this.selectedMovie.ratings.splice(index, 1);\n  }\n\n  addRating(): void {\n    this.selectedMovie.ratings.push({ source: '', value: '', total: '' });\n  }\n  deleteCategory(category: Category) {\n    this.categoryService.deleteCategory(category.id).subscribe(() => {\n      this.getCategories();\n      this.main.showMessage('Success','Category successfully deleted','');\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}