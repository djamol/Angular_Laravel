{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"./auth.service\";\nexport class MovieService {\n  constructor(http, location, auth) {\n    this.http = http;\n    this.location = location;\n    this.auth = auth;\n    this.token = '';\n    // HTTP headers, if needed\n    this.httpOptions = {};\n    this.apiUrl = this.auth.apiUrl;\n    console.log(\"api-movie\", this.apiUrl);\n  }\n  setHeader() {\n    let auth = 'Bearer ' + this.auth.getToken();\n    console.log(\"auth test->\", auth.replaceAll('\"', ''));\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': auth.replaceAll('\"', '')\n      })\n    };\n  }\n  // Fetch all movies\n  getMovies() {\n    return this.http.get(this.apiUrl + \"/movies\");\n  }\n  isAdmin() {\n    return this.http.get(this.apiUrl + \"/admin\", [], this.httpOptions);\n  }\n  getDashboard() {\n    return this.http.get(this.apiUrl + \"/dashboard\");\n  }\n  // Create a new movie\n  createMovie(movie) {\n    this.setHeader();\n    return this.http.post(this.apiUrl + \"/movies\", movie, this.httpOptions);\n  }\n  // Update an existing movie\n  updateMovie(id, movie) {\n    this.setHeader();\n    const url = `${this.apiUrl}/movies/${id}`;\n    return this.http.put(url, movie, this.httpOptions);\n  }\n  // Delete a movie by ID\n  deleteMovie(id) {\n    this.setHeader();\n    const url = `${this.apiUrl}/movies/${id}`;\n    return this.http.delete(url, this.httpOptions);\n  }\n}\nMovieService.ɵfac = function MovieService_Factory(t) {\n  return new (t || MovieService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Location), i0.ɵɵinject(i3.AuthService));\n};\nMovieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MovieService,\n  factory: MovieService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;;AAQ9D,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,IAAgB,EAASC,QAAiB,EAASC,IAAgB;IAAnE,SAAI,GAAJF,IAAI;IAAqB,aAAQ,GAARC,QAAQ;IAAkB,SAAI,GAAJC,IAAI;IADlE,UAAK,GAAG,EAAE;IAKnB;IACA,gBAAW,GAAG,EAAE;IAJlB,IAAI,CAACC,MAAM,GAAC,IAAI,CAACD,IAAI,CAACC,MAAM;IAC5BC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAC,IAAI,CAACF,MAAM,CAAC;EAClC;EAGAG,SAAS;IACP,IAAIJ,IAAI,GAAG,SAAS,GAAG,IAAI,CAACA,IAAI,CAACK,QAAQ,EAAE;IAC3CH,OAAO,CAACC,GAAG,CAAC,aAAa,EAACH,IAAI,CAACM,UAAU,CAAC,GAAG,EAAC,EAAE,CAAC,CAAC;IAClD,IAAI,CAACC,WAAW,GAAE;MACdC,OAAO,EAAE,IAAIb,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEK,IAAI,CAACM,UAAU,CAAC,GAAG,EAAC,EAAE;OACxC;KACF;EACL;EACA;EACAG,SAAS;IACP,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAM,IAAI,CAACT,MAAM,GAAE,SAAS,CAAC;EACnD;EACAU,OAAO;IACL,OAAO,IAAI,CAACb,IAAI,CAACY,GAAG,CAAM,IAAI,CAACT,MAAM,GAAE,QAAQ,EAAC,EAAE,EAAE,IAAI,CAACM,WAAW,CAAC;EACvE;EACAK,YAAY;IACV,OAAO,IAAI,CAACd,IAAI,CAACY,GAAG,CAAM,IAAI,CAACT,MAAM,GAAE,YAAY,CAAC;EACtD;EACA;EACAY,WAAW,CAACC,KAAY;IACtB,IAAI,CAACV,SAAS,EAAE;IAChB,OAAO,IAAI,CAACN,IAAI,CAACiB,IAAI,CAAQ,IAAI,CAACd,MAAM,GAAE,SAAS,EAAEa,KAAK,EAAE,IAAI,CAACP,WAAW,CAAC;EAC/E;EAGA;EACAS,WAAW,CAACC,EAAU,EAAEH,KAAY;IAClC,IAAI,CAACV,SAAS,EAAE;IAChB,MAAMc,GAAG,GAAG,GAAG,IAAI,CAACjB,MAAM,WAAWgB,EAAE,EAAE;IACzC,OAAO,IAAI,CAACnB,IAAI,CAACqB,GAAG,CAAQD,GAAG,EAAEJ,KAAK,EAAE,IAAI,CAACP,WAAW,CAAC;EAC3D;EAEA;EACAa,WAAW,CAACH,EAAU;IACpB,IAAI,CAACb,SAAS,EAAE;IAChB,MAAMc,GAAG,GAAG,GAAG,IAAI,CAACjB,MAAM,WAAWgB,EAAE,EAAE;IACzC,OAAO,IAAI,CAACnB,IAAI,CAACuB,MAAM,CAAOH,GAAG,EAAE,IAAI,CAACX,WAAW,CAAC;EACtD;;AAjDWX,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA0B,SAAZ1B,YAAY;EAAA2B,YAFX;AAAM","names":["HttpHeaders","MovieService","constructor","http","location","auth","apiUrl","console","log","setHeader","getToken","replaceAll","httpOptions","headers","getMovies","get","isAdmin","getDashboard","createMovie","movie","post","updateMovie","id","url","put","deleteMovie","delete","factory","providedIn"],"sourceRoot":"","sources":["/var/www/html/openpbx/resources/angular/src/app/service/movie.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Movie } from '../model/movie.model';\nimport { Location } from '@angular/common';\nimport { AuthService } from './auth.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class MovieService {\n\n    public apiUrl: any;\n    public token = '';\n  constructor(private http: HttpClient,private location:Location,private auth:AuthService) {\nthis.apiUrl=this.auth.apiUrl;\nconsole.log(\"api-movie\",this.apiUrl);\n  }\n  // HTTP headers, if needed\n  httpOptions = {};\n  setHeader(){\n    let auth = 'Bearer ' + this.auth.getToken();\n    console.log(\"auth test->\",auth.replaceAll('\"',''));\n    this.httpOptions ={\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': auth.replaceAll('\"','')\n        })\n      };\n  }\n  // Fetch all movies\n  getMovies(): Observable<any> {\n    return this.http.get<any>(this.apiUrl+ \"/movies\");\n  }\n  isAdmin(): Observable<any> {\n    return this.http.get<any>(this.apiUrl+ \"/admin\",[], this.httpOptions);\n  }\n  getDashboard(): Observable<any> {\n    return this.http.get<any>(this.apiUrl+ \"/dashboard\");\n  }\n  // Create a new movie\n  createMovie(movie: Movie): Observable<Movie> {\n    this.setHeader();\n    return this.http.post<Movie>(this.apiUrl+ \"/movies\", movie, this.httpOptions);\n  }\n\n\n  // Update an existing movie\n  updateMovie(id: number, movie: Movie): Observable<Movie> {\n    this.setHeader();\n    const url = `${this.apiUrl}/movies/${id}`;\n    return this.http.put<Movie>(url, movie, this.httpOptions);\n  }\n\n  // Delete a movie by ID\n  deleteMovie(id: number): Observable<void> {\n    this.setHeader();\n    const url = `${this.apiUrl}/movies/${id}`;\n    return this.http.delete<void>(url, this.httpOptions);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}