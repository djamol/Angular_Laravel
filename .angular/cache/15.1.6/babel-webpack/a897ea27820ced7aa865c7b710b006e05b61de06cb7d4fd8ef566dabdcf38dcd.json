{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"./auth.service\";\nexport class CategoryService {\n  constructor(http, location, auth) {\n    this.http = http;\n    this.location = location;\n    this.auth = auth;\n    this.httpOptions = {};\n    this.apiUrl = this.auth.apiUrl;\n    console.log(\"api-categories\", this.apiUrl);\n  }\n  getApiUrl(endpoint) {\n    const domainUrl = this.location.prepareExternalUrl('');\n    const apiUrl = `${domainUrl}/api/${endpoint}`;\n    return apiUrl;\n  }\n  // HTTP headers, if needed\n  setHeader() {\n    let auth = 'Bearer ' + this.auth.getToken();\n    console.log(\"auth test->\", auth.replaceAll('\"', ''));\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': auth.replaceAll('\"', '')\n      })\n    };\n  }\n  // Fetch all Categorys\n  getCategories() {\n    return this.http.get(this.apiUrl + \"/categories\");\n  }\n  // Create a new Category\n  createCategory(Category) {\n    this.setHeader();\n    return this.http.post(this.apiUrl + \"/categories\", Category, this.httpOptions);\n  }\n  // Update an existing Category\n  updateCategory(id, Category) {\n    this.setHeader();\n    const url = `${this.apiUrl}/categories/${id}`;\n    return this.http.put(url, Category, this.httpOptions);\n  }\n  // Delete a Category by ID\n  deleteCategory(id) {\n    this.setHeader();\n    const url = `${this.apiUrl}/categories/${id}`;\n    return this.http.delete(url, this.httpOptions);\n  }\n}\nCategoryService.ɵfac = function CategoryService_Factory(t) {\n  return new (t || CategoryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Location), i0.ɵɵinject(i3.AuthService));\n};\nCategoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CategoryService,\n  factory: CategoryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;;AAQ9D,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,IAAgB,EAASC,QAAiB,EAASC,IAAgB;IAAnE,SAAI,GAAJF,IAAI;IAAqB,aAAQ,GAARC,QAAQ;IAAkB,SAAI,GAAJC,IAAI;IAqB3E,gBAAW,GAAG,EAAE;IApBd,IAAI,CAACC,MAAM,GAAC,IAAI,CAACD,IAAI,CAACC,MAAM;IAC5BC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAC,IAAI,CAACF,MAAM,CAAC;EAE3C;EACAG,SAAS,CAACC,QAAgB;IACxB,MAAMC,SAAS,GAAG,IAAI,CAACP,QAAQ,CAACQ,kBAAkB,CAAC,EAAE,CAAC;IACtD,MAAMN,MAAM,GAAG,GAAGK,SAAS,QAAQD,QAAQ,EAAE;IAC7C,OAAOJ,MAAM;EACf;EACA;EACAO,SAAS;IACP,IAAIR,IAAI,GAAG,SAAS,GAAG,IAAI,CAACA,IAAI,CAACS,QAAQ,EAAE;IAC3CP,OAAO,CAACC,GAAG,CAAC,aAAa,EAACH,IAAI,CAACU,UAAU,CAAC,GAAG,EAAC,EAAE,CAAC,CAAC;IAClD,IAAI,CAACC,WAAW,GAAE;MACdC,OAAO,EAAE,IAAIjB,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEK,IAAI,CAACU,UAAU,CAAC,GAAG,EAAC,EAAE;OACxC;KACF;EACL;EAEA;EACAG,aAAa;IACX,OAAO,IAAI,CAACf,IAAI,CAACgB,GAAG,CAAa,IAAI,CAACb,MAAM,GAAE,aAAa,CAAC;EAC9D;EAEA;EACAc,cAAc,CAACC,QAAkB;IAC/B,IAAI,CAACR,SAAS,EAAE;IAChB,OAAO,IAAI,CAACV,IAAI,CAACmB,IAAI,CAAW,IAAI,CAAChB,MAAM,GAAE,aAAa,EAAEe,QAAQ,EAAE,IAAI,CAACL,WAAW,CAAC;EACzF;EAGA;EACAO,cAAc,CAACC,EAAU,EAAEH,QAAkB;IAC3C,IAAI,CAACR,SAAS,EAAE;IAChB,MAAMY,GAAG,GAAG,GAAG,IAAI,CAACnB,MAAM,eAAekB,EAAE,EAAE;IAC7C,OAAO,IAAI,CAACrB,IAAI,CAACuB,GAAG,CAAWD,GAAG,EAAEJ,QAAQ,EAAE,IAAI,CAACL,WAAW,CAAC;EACjE;EAEA;EACAW,cAAc,CAACH,EAAU;IACvB,IAAI,CAACX,SAAS,EAAE;IAChB,MAAMY,GAAG,GAAG,GAAG,IAAI,CAACnB,MAAM,eAAekB,EAAE,EAAE;IAC7C,OAAO,IAAI,CAACrB,IAAI,CAACyB,MAAM,CAAOH,GAAG,EAAE,IAAI,CAACT,WAAW,CAAC;EACtD;;AAlDWf,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAA4B,SAAf5B,eAAe;EAAA6B,YAFd;AAAM","names":["HttpHeaders","CategoryService","constructor","http","location","auth","apiUrl","console","log","getApiUrl","endpoint","domainUrl","prepareExternalUrl","setHeader","getToken","replaceAll","httpOptions","headers","getCategories","get","createCategory","Category","post","updateCategory","id","url","put","deleteCategory","delete","factory","providedIn"],"sourceRoot":"","sources":["/var/www/html/openpbx/resources/angular/src/app/service/category.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Category } from '../model/category.model';\nimport { Location } from '@angular/common';\nimport { AuthService } from './auth.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n\n    public apiUrl: any;\n\n  constructor(private http: HttpClient,private location:Location,private auth:AuthService) {\n    this.apiUrl=this.auth.apiUrl;\n    console.log(\"api-categories\",this.apiUrl);\n\n  }\n  getApiUrl(endpoint: string): string {\n    const domainUrl = this.location.prepareExternalUrl('');\n    const apiUrl = `${domainUrl}/api/${endpoint}`;\n    return apiUrl;\n  }\n  // HTTP headers, if needed\n  setHeader(){\n    let auth = 'Bearer ' + this.auth.getToken();\n    console.log(\"auth test->\",auth.replaceAll('\"',''));\n    this.httpOptions ={\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': auth.replaceAll('\"','')\n        })\n      };\n  }\n  httpOptions = {};\n  // Fetch all Categorys\n  getCategories(): Observable<Category[]> {\n    return this.http.get<Category[]>(this.apiUrl+ \"/categories\");\n  }\n\n  // Create a new Category\n  createCategory(Category: Category): Observable<Category> {\n    this.setHeader();\n    return this.http.post<Category>(this.apiUrl+ \"/categories\", Category, this.httpOptions);\n  }\n\n\n  // Update an existing Category\n  updateCategory(id: number, Category: Category): Observable<Category> {\n    this.setHeader();\n    const url = `${this.apiUrl}/categories/${id}`;\n    return this.http.put<Category>(url, Category, this.httpOptions);\n  }\n\n  // Delete a Category by ID\n  deleteCategory(id: number): Observable<void> {\n    this.setHeader();\n    const url = `${this.apiUrl}/categories/${id}`;\n    return this.http.delete<void>(url, this.httpOptions);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}