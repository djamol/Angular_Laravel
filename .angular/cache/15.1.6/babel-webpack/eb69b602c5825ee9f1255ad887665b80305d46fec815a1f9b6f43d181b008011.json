{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport * as CryptoJS from 'crypto-js';\nimport * as i0 from \"@angular/core\";\nexport class CookieService {\n  constructor(document) {\n    this.document = document;\n  }\n  getCookie(name) {\n    const cookies = this.document.cookie.split(';');\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim();\n      if (cookie.startsWith(name + '=')) {\n        return cookie.substring(name.length + 1);\n      }\n    }\n    return '';\n  }\n  storeCookie(key, value) {\n    const encryptedData = CryptoJS.AES.encrypt(JSON.stringify(value), 'secretKey').toString();\n    const expirationDate = new Date();\n    expirationDate.setTime(expirationDate.getTime() + 60 * 60 * 1000); // 1 hour from now\n    const cookieOptions = {\n      expires: expirationDate.toUTCString(),\n      path: '/'\n    };\n    document.cookie = `${key}=${encryptedData}; ${Object.entries(cookieOptions).map(([k, v]) => `${k}=${v}`).join('; ')}`;\n  }\n  readCookie(key) {\n    let value = this.getCookie(key);\n    return CryptoJS.AES.decrypt(value, 'secretKey').toString(CryptoJS.enc.Utf8);\n  }\n  delCookie(key) {\n    document.cookie = `${key}=; expires=Mon, 01 Jan 2000 00:00:00 UTC; path=/`;\n  }\n}\nCookieService.ɵfac = function CookieService_Factory(t) {\n  return new (t || CookieService)(i0.ɵɵinject(DOCUMENT));\n};\nCookieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CookieService,\n  factory: CookieService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAASA,QAAQ,QAAQ,iBAAiB;AAC1C,OAAO,KAAKC,QAAQ,MAAM,WAAW;;AAErC,OAAM,MAAOC,aAAa;EACxBC,YAAsCC,QAAkB;IAAlB,aAAQ,GAARA,QAAQ;EAAa;EAEpDC,SAAS,CAACC,IAAY;IAC3B,MAAMC,OAAO,GAAG,IAAI,CAACH,QAAQ,CAACI,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;IAC/C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACvC,MAAMF,MAAM,GAAGD,OAAO,CAACG,CAAC,CAAC,CAACE,IAAI,EAAE;MAChC,IAAIJ,MAAM,CAACK,UAAU,CAACP,IAAI,GAAG,GAAG,CAAC,EAAE;QACjC,OAAOE,MAAM,CAACM,SAAS,CAACR,IAAI,CAACK,MAAM,GAAG,CAAC,CAAC;;;IAG5C,OAAO,EAAE;EACX;EAEOI,WAAW,CAACC,GAAU,EAACC,KAAY;IACxC,MAAMC,aAAa,GAAGjB,QAAQ,CAACkB,GAAG,CAACC,OAAO,CAACC,IAAI,CAACC,SAAS,CAACL,KAAK,CAAC,EAAE,WAAW,CAAC,CAACM,QAAQ,EAAE;IACzF,MAAMC,cAAc,GAAG,IAAIC,IAAI,EAAE;IACjCD,cAAc,CAACE,OAAO,CAACF,cAAc,CAACG,OAAO,EAAE,GAAI,EAAE,GAAG,EAAE,GAAG,IAAK,CAAC,CAAC,CAAC;IACrE,MAAMC,aAAa,GAAG;MACtBC,OAAO,EAAEL,cAAc,CAACM,WAAW,EAAE;MACrCC,IAAI,EAAE;KACL;IACD3B,QAAQ,CAACI,MAAM,GAAG,GAAGQ,GAAG,IAAIE,aAAa,KAAKc,MAAM,CAACC,OAAO,CAACL,aAAa,CAAC,CAACM,GAAG,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,KAAK,GAAGD,CAAC,IAAIC,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE;EACvH;EACOC,UAAU,CAACtB,GAAU;IAC3B,IAAIC,KAAK,GAAE,IAAI,CAACZ,SAAS,CAACW,GAAG,CAAC;IAC7B,OAASf,QAAQ,CAACkB,GAAG,CAACoB,OAAO,CAACtB,KAAK,EAAE,WAAW,CAAC,CAACM,QAAQ,CAACtB,QAAQ,CAACuC,GAAG,CAACC,IAAI,CAAC;EAC/E;EACOC,SAAS,CAAC1B,GAAU;IACzBZ,QAAQ,CAACI,MAAM,GAAG,GAAGQ,GAAG,kDAAkD;EAC5E;;AA9BWd,aAAa;mBAAbA,aAAa,cACJF,QAAQ;AAAA;AADjBE,aAAa;SAAbA,aAAa;EAAAyC,SAAbzC,aAAa;AAAA","names":["DOCUMENT","CryptoJS","CookieService","constructor","document","getCookie","name","cookies","cookie","split","i","length","trim","startsWith","substring","storeCookie","key","value","encryptedData","AES","encrypt","JSON","stringify","toString","expirationDate","Date","setTime","getTime","cookieOptions","expires","toUTCString","path","Object","entries","map","k","v","join","readCookie","decrypt","enc","Utf8","delCookie","factory"],"sourceRoot":"","sources":["/var/www/html/openpbx/resources/angular/src/app/service/cookie.service.ts"],"sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as CryptoJS from 'crypto-js';\n@Injectable()\nexport class CookieService {\n  constructor(@Inject(DOCUMENT) private document: Document) {}\n\n  public getCookie(name: string): string {\n    const cookies = this.document.cookie.split(';');\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim();\n      if (cookie.startsWith(name + '=')) {\n        return cookie.substring(name.length + 1);\n      }\n    }\n    return '';\n  }\n\n  public storeCookie(key:string,value:string){\n    const encryptedData = CryptoJS.AES.encrypt(JSON.stringify(value), 'secretKey').toString();\n    const expirationDate = new Date();\n    expirationDate.setTime(expirationDate.getTime() + (60 * 60 * 1000)); // 1 hour from now\n    const cookieOptions = {\n    expires: expirationDate.toUTCString(),\n    path: '/'\n    };\n    document.cookie = `${key}=${encryptedData}; ${Object.entries(cookieOptions).map(([k, v]) => `${k}=${v}`).join('; ')}`;\n  }\n  public readCookie(key:string){\n   let value= this.getCookie(key);\n    return   CryptoJS.AES.decrypt(value, 'secretKey').toString(CryptoJS.enc.Utf8);\n  }\n  public delCookie(key:string){\n    document.cookie = `${key}=; expires=Mon, 01 Jan 2000 00:00:00 UTC; path=/`;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}